--  База данных Stepik "Учебная аналитика по курсу"--

/* О ДАННЫХ:
Курс на платформе Stepik состоит из нескольких модулей, каждый модуль включает несколько уроков, 
для каждого урока хранится информация о его положении в модуле. Каждый урок состоит из последовательности шагов. 
Каждый шаг имеет свой тип (это может быть текст, задание на SQL и пр.) и также порядковый номер в уроке.

Когда пользователь проходит курс на платформе Stepik, все его действия фиксируются: 
какие задания и когда он выполнил, сколько попыток сделал, правильно ли решил задание. 
Также хранятся все его комментарии. Если пользователь проходит курс и получает сертификат, 
то сохраняется дата его выдачи. */


/* ЧТО НУЖНО:
Реализовать удобный поиск нужных шагов на платформе Stepik.

Отобрать все шаги, в которых рассматриваются вложенные запросы 
Указать к какому уроку и модулю они относятся. Для этого вывести 3 поля:
- в поле Модуль указать номер модуля и его название через пробел;
- в поле Урок указать номер модуля, порядковый номер урока (lesson_position) через точку и название урока через пробел;
- в поле Шаг указать номер модуля, порядковый номер урока (lesson_position) через точку, 
порядковый номер шага (step_position) через точку и название шага через пробел.
Длину полей Модуль и Урок ограничить 19 символами, при этом слишком длинные надписи обозначить многоточием в конце 
(16 символов - это номер модуля или урока, пробел и  название Урока или Модуля,к ним присоединить "..."). 
Информацию отсортировать по возрастанию номеров модулей, порядковых номеров уроков и порядковых номеров шагов.*/

SELECT CONCAT(LEFT(CONCAT(module_id,' ', module_name ),16),'...') AS 'Модуль',
       CONCAT(LEFT(CONCAT(module_id,'.', lesson_position,' ', lesson_name ), 16),'...') AS 'Урок',
       CONCAT(module_id,'.', lesson_position,'.', step_position,' ', step_name ) AS 'Шаг'
       
FROM module 
        INNER JOIN lesson USING (module_id)
        INNER JOIN  step USING (lesson_id)
        
WHERE step_name LIKE '%ложен%' AND step_name LIKE '%апрос%'
ORDER BY module_id,lesson_position, step_position;

/* Query result:
+---------------------+---------------------+-------------------------------------------------------------+
| Модуль              | Урок                | Шаг                                                         |
+---------------------+---------------------+-------------------------------------------------------------+
| 1 Основы реляцио... | 1.4 Вложенные за... | 1.4.2 Вложенный запрос, возвращающий одно значение          |
| 1 Основы реляцио... | 1.4 Вложенные за... | 1.4.3 Использование вложенного запроса в выражении          |
| 1 Основы реляцио... | 1.4 Вложенные за... | 1.4.4 Вложенный запрос, оператор IN                         |
| 1 Основы реляцио... | 1.4 Вложенные за... | 1.4.5 Вложенный запрос, операторы ANY и ALL                 |
| 1 Основы реляцио... | 1.4 Вложенные за... | 1.4.6 Вложенный запрос после SELECT                         |
| 1 Основы реляцио... | 1.5 Запросы корр... | 1.5.5 Добавление записей, вложенные запросы                 |
| 2 Запросы SQL к ... | 2.2 Запросы на в... | 2.2.7 Запросы для нескольких таблиц со вложенными запросами |
| 2 Запросы SQL к ... | 2.2 Запросы на в... | 2.2.8 Вложенные запросы в операторах соединения             |
| 2 Запросы SQL к ... | 2.3 Запросы корр... | 2.3.5 Запрос на обновление, вложенные запросы               |
+---------------------+---------------------+-------------------------------------------------------------+
Affected rows: 9*/


/* ЧТО НУЖНО: 
Улучшить навигацию по курсу - реализовать возможность поиска шагов по ключевым словам. 
Необходимо создать таблицу с терминами keyword, а затем связать ее с таблицей step 
через вспомогательную таблицу step_keyword. 
Каждая запись этой таблицы - это id шага и id встречающегося на этом шаге ключевого слова.

Заполнить таблицу step_keyword следующим образом: если ключевое слово есть в названии шага, 
то включить в step_keyword строку с id шага и id ключевого слова.*/

INSERT INTO step_keyword(step_id, keyword_id)
SELECT step_id, keyword_id
FROM keyword CROSS JOIN  step
WHERE step_name REGEXP CONCAT('\\b',keyword_name,'\\b');


/* Query result:
+---------+------------+
| step_id | keyword_id |
+---------+------------+
| 38      | 1          |
| 81      | 3          |
| 82      | 4          |
| 82      | 5          |
| 82      | 6          |
| 81      | 7          |
| 82      | 7          |
| 83      | 7          |
| 83      | 8          |
| 47      | 10         |
| 47      | 11         |
| 42      | 15         |
| 43      | 16         |
| 44      | 16         |
| 42      | 17         |
| 43      | 18         |
| 46      | 18         |
| 43      | 19         |
| 88      | 26         |
| 112     | 27         |
| 113     | 27         |
| 37      | 28         |
| 37      | 29         |
| 18      | 30         |
| 36      | 30         |
| 19      | 31         |
| 18      | 32         |
+---------+------------+
Affected rows: 27*/

/* ЧТО НУЖНО: 

Для студента с именем student_61 вывести все его попытки: название шага, результат и 
дату отправки попытки (submission_time). Информацию отсортировать по дате отправки попытки и указать, 
сколько минут прошло между отправкой соседних попыток. Название шага ограничить 20 символами и добавить "...". 
Столбцы назвать Студент, Шаг, Результат, Дата_отправки, Разница.*/
SELECT student_name AS 'Студент', 
        concat(left(step_name,20),'...') AS 'Шаг',
        result AS 'Результат', 
        FROM_UNIXTIME(submission_time) AS 'Дата_отправки',
       IFNULL(
              SEC_TO_TIME(
                     submission_time - LAG(submission_time) OVER (ORDER BY FROM_UNIXTIME(submission_time))
                     ), 
              SEC_TO_TIME(0)
              ) AS 'Разница'
FROM student 
        INNER JOIN step_student USING(student_id)
        INNER JOIN step USING(step_id)

WHERE student_name ='student_61';

/*Query result:
+------------+-------------------------+-----------+---------------------+------------------+
| Студент    | Шаг                     | Результат | Дата_отправки       | Разница          |
+------------+-------------------------+-----------+---------------------+------------------+
| student_61 | Выборка всех данных ... | correct   | 2020-08-27 14:22:14 | 0:00:00          |
| student_61 | Выборка отдельных ст... | correct   | 2020-08-27 14:23:53 | 0:01:39          |
| student_61 | Выборка отдельных ст... | correct   | 2020-08-27 14:28:41 | 0:04:48          |
| student_61 | Выборка данных с соз... | wrong     | 2020-08-27 14:33:57 | 0:05:16          |
| student_61 | Выборка данных с соз... | wrong     | 2020-08-27 14:34:24 | 0:00:27          |
| student_61 | Выборка данных с соз... | correct   | 2020-08-27 14:34:50 | 0:00:26          |
| student_61 | Выборка данных, вычи... | correct   | 2020-08-27 14:42:44 | 0:07:54          |
| student_61 | Выборка данных, вычи... | wrong     | 2020-08-27 14:54:06 | 0:11:22          |
 ............ ......................... ........... ..................... ..................
+------------+-------------------------+-----------+---------------------+------------------+
Affected rows: 43 */


/* ЧТО НУЖНО: 

Вычислить рейтинг каждого студента относительно студента, прошедшего наибольшее количество шагов в модуле
(вычисляется как отношение количества пройденных студентом шагов к максимальному количеству пройденных шагов,
умноженное на 100). Вывести номер модуля, имя студента, количество пройденных им шагов и относительный рейтинг. 
Относительный рейтинг округлить до одного знака после запятой. Столбцы назвать Модуль, Студент, Пройдено_шагов 
и Относительный_рейтинг  соответственно. Информацию отсортировать сначала по возрастанию номера модуля, 
потом по убыванию относительного рейтинга и, наконец, по имени студента в алфавитном порядке.
*/

WITH student_module_result(mod_id,st_n,kol_step)
AS
(
    SELECT module_id, 
       student_name, 
       COUNT(distinct step_id) 
    FROM module INNER JOIN lesson USING(module_id)
                INNER JOIN step USING(lesson_id)
                INNER JOIN step_student USING(step_id)
                INNER JOIN student USING(student_id)
    where result='correct'
    group by module_id, student_name
)

SELECT mod_id AS 'Модуль',
        st_n AS 'Студент', 
        kol_step AS 'Пройдено_шагов',
       ROUND((kol_step/MAX(kol_step) OVER(PARTITION BY mod_id) )*100,1) AS 'Относительный_рейтинг'
FROM student_module_result       
ORDER BY mod_id, Относительный_рейтинг DESC, Студент;

/*Query result:
+--------+------------+----------------+-----------------------+
| Модуль | Студент    | Пройдено_шагов | Относительный_рейтинг |
+--------+------------+----------------+-----------------------+
| 1      | student_1  | 11             | 100.0                 |
| 1      | student_10 | 11             | 100.0                 |
| 1      | student_11 | 11             | 100.0                 |
| 1      | student_12 | 11             | 100.0                 |
 ........ ............ ................ ....................... 
| 2      | student_24 | 14             | 66.7                  |
| 2      | student_52 | 9              | 42.9                  |
| 2      | student_56 | 9              | 42.9                  |
| 2      | student_34 | 8              | 38.1                  |
| 2      | student_40 | 8              | 38.1                  |
| 2      | student_11 | 5              | 23.8                  |
| 2      | student_48 | 5              | 23.8                  |
| 2      | student_42 | 4              | 19.0                  |
| 2      | student_61 | 3              | 14.3                  |
| 2      | student_13 | 2              | 9.5                   |
| 2      | student_26 | 2              | 9.5                   |
+--------+------------+----------------+-----------------------+
Affected rows: 95*/


/* ЧТО НУЖНО: 

Для студента с именем student_59 вывести следующую информацию по всем его попыткам:

- информация о шаге: номер модуля, символ '.', позиция урока в модуле, символ '.', позиция шага в модуле;
- порядковый номер попытки для каждого шага - определяется по возрастанию времени отправки попытки;
- результат попытки;
- время попытки (преобразованное к формату времени) - определяется как разность между временем 
отправки попытки и времени ее начала, в случае если попытка длилась более 1 часа, 
то время попытки заменить на среднее время всех попыток пользователя по всем шагам без учета тех, 
которые длились больше 1 часа;
- относительное время попытки  - определяется как отношение времени попытки (с учетом замены времени попытки) к суммарному времени всех попыток  шага, округленное до двух знаков после запятой.
 
Информацию отсортировать сначала по возрастанию id шага, а затем по возрастанию номера попытки 
(определяется по времени отправки попытки).
*/

WITH avg_time_st(st_name, st_avg_time)
AS 
    ( SELECT student_name, 
            round(sum(tr_t)/count(tr_t) )
      FROM
        ( 
            SELECT student_name, 
            (submission_time-attempt_time) AS tr_t
            FROM student INNER JOIN step_student USING(student_id)     
            WHERE (submission_time-attempt_time)/3600<=1
        ) query_in 
         /*выбор всех показателей меньше 1ч*/
     GROUP BY student_name
    ),    
/*расчет среднего показателя для студента*/

main_query(stud,step_n,at_num,res,tim)
AS
    (
        SELECT student_name , 
                concat(module_id,'.',lesson_position,'.', step_position) ,
                RANK() over(partition by step_id order by submission_time) ,
                result ,
                if ((submission_time-attempt_time)/3600>1,st_avg_time,submission_time-attempt_time) 

              FROM
 avg_time_st INNER JOIN student ON avg_time_st.st_name=student.student_name
                        INNER JOIN step_student USING(student_id)
                        INNER JOIN step USING(step_id)
                        INNER JOIN lesson USING(lesson_id)
        WHERE student_name='student_59'
    ),
/*вывод всех параметров кроме относительного времени*/

otn_time(step_n, sum_time_step)
AS ( 
    SELECT step_n, sum(tim)
    FROM main_query
    GROUP BY step_n
    )
/*определение суммы времени по шагам*/

SELECT stud AS 'Студент', 
          main_query.step_n  AS 'Шаг',
           at_num AS 'Номер_попытки',
           res AS 'Результат',
           sec_to_time(tim) AS 'Время_попытки',
           round(tim/sum_time_step*100,2) AS 'Относительное_время'
FROM main_query INNER JOIN otn_time ON otn_time.step_n=main_query.step_n

/* Query result:
+------------+--------+---------------+-----------+---------------+---------------------+
| Студент    | Шаг    | Номер_попытки | Результат | Время_попытки | Относительное_время |
+------------+--------+---------------+-----------+---------------+---------------------+
| student_59 | 1.2.2  | 1             | correct   | 0:00:28       | 100.00              |
| student_59 | 1.2.3  | 1             | correct   | 0:01:11       | 100.00              |
| student_59 | 1.2.4  | 1             | correct   | 0:06:09       | 100.00              |
| student_59 | 1.2.5  | 1             | correct   | 0:02:24       | 100.00              |
| student_59 | 1.2.6  | 1             | wrong     | 0:09:42       | 90.37               |
| student_59 | 1.2.6  | 2             | wrong     | 0:00:05       | 0.78                |
| student_59 | 1.2.6  | 3             | wrong     | 0:00:23       | 3.57                |
| student_59 | 1.2.6  | 4             | wrong     | 0:00:10       | 1.55                |
| student_59 | 1.2.6  | 5             | correct   | 0:00:20       | 3.11                |
| student_59 | 1.2.6  | 6             | correct   | 0:00:04       | 0.62                |
| student_59 | 1.2.7  | 1             | wrong     | 0:11:44       | 98.88               |
| student_59 | 1.2.7  | 2             | correct   | 0:00:08       | 1.12                |
| student_59 | 1.2.8  | 1             | correct   | 0:02:23       | 100.00              |
| student_59 | 1.2.9  | 1             | wrong     | 0:04:53       | 92.72               |
 ...........  ........  ..............  .........   .............   ....................
| student_59 | 2.4.5  | 1             | correct   | 0:07:10       | 100.00              |
| student_59 | 2.4.6  | 1             | correct   | 0:13:38       | 100.00              |
| student_59 | 2.4.7  | 1             | correct   | 0:21:18       | 100.00              |
| student_59 | 2.4.8  | 1             | correct   | 0:33:02       | 100.00              |
| student_59 | 2.4.9  | 1             | wrong     | 0:18:12       | 71.75               |
| student_59 | 2.4.9  | 2             | correct   | 0:07:10       | 28.25               |
| student_59 | 2.4.10 | 1             | correct   | 0:05:32       | 100.00              |
| student_59 | 2.4.11 | 1             | correct   | 0:40:27       | 100.00              |
| student_59 | 2.4.12 | 1             | correct   | 0:07:10       | 100.00              |
| student_59 | 2.4.13 | 1             | correct   | 0:07:15       | 100.00              |
+------------+--------+---------------+-----------+---------------+---------------------+
Affected rows: 58*/

